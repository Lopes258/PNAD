#!/usr/bin/env python3
"""
Script de teste para a API IBGE
Testa a conex√£o com o banco e a extra√ß√£o de dados geogr√°ficos
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from api_IBGE import get_geo, get_location_info, create_ibge_tables, query_ibge_data
from database import DatabaseConnection

def test_database_connection():
    """Testa a conex√£o com o banco de dados"""
    print("üîå Testando conex√£o com o banco de dados...")
    
    db = DatabaseConnection()
    if db.test_connection():
        print("‚úÖ Conex√£o com o banco estabelecida com sucesso!")
        return True
    else:
        print("‚ùå Falha na conex√£o com o banco")
        return False

def test_api_connection():
    """Testa a conex√£o com a API IBGE"""
    print("\nüåê Testando conex√£o com a API IBGE...")
    
    try:
        # Testa com informa√ß√µes de estados (tabela pequena)
        df = get_location_info(geo_level="N2")
        
        if df is not None and not df.empty:
            print(f"‚úÖ API funcionando! Extra√≠das {len(df)} localidades")
            print(f"   Colunas dispon√≠veis: {list(df.columns)}")
            print(f"   Primeiros dados:")
            print(df.head(3).to_string())
            return True
        else:
            print("‚ùå API retornou dados vazios")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na API: {e}")
        return False

def test_table_creation():
    """Testa a cria√ß√£o das tabelas"""
    print("\nüóÑÔ∏è Testando cria√ß√£o das tabelas...")
    
    try:
        if create_ibge_tables():
            print("‚úÖ Tabelas criadas/verificadas com sucesso!")
            return True
        else:
            print("‚ùå Falha ao criar tabelas")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao criar tabelas: {e}")
        return False

def test_single_location_extraction():
    """Testa a extra√ß√£o de informa√ß√µes de localidades"""
    print("\nüìä Testando extra√ß√£o de localidades...")
    
    try:
        # Testa com estados
        df = get_location_info(geo_level="N2")
        
        if df is not None and not df.empty:
            print(f"‚úÖ Extra√ß√£o bem-sucedida! {len(df)} localidades")
            print(f"   Estrutura dos dados:")
            print(f"   - Estados: {df['nome'].nunique()}")
            print(f"   - Siglas: {df['sigla'].nunique()}")
            return True
        else:
            print("‚ùå Falha na extra√ß√£o")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na extra√ß√£o: {e}")
        return False

def test_geographic_malha():
    """Testa a extra√ß√£o de malhas geogr√°ficas"""
    print("\nüó∫Ô∏è Testando extra√ß√£o de malhas geogr√°ficas...")
    
    try:
        # Testa com malha do Brasil (mais leve)
        gdf = get_geo(geo_level="N1")
        
        if gdf is not None and not gdf.empty:
            print(f"‚úÖ Malha extra√≠da com sucesso! {len(gdf)} fei√ß√µes")
            print(f"   Estrutura da malha:")
            print(f"   - Colunas: {list(gdf.columns)}")
            print(f"   - Geometria: {gdf.geometry.geom_type.iloc[0] if hasattr(gdf, 'geometry') else 'N/A'}")
            return True
        else:
            print("‚ùå Falha na extra√ß√£o da malha")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na extra√ß√£o da malha: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ INICIANDO TESTES DA API IBGE")
    print("=" * 50)
    
    tests = [
        ("Conex√£o com banco", test_database_connection),
        ("Conex√£o com API", test_api_connection),
        ("Cria√ß√£o de tabelas", test_table_creation),
        ("Extra√ß√£o de localidades", test_single_location_extraction),
        ("Extra√ß√£o de malhas", test_geographic_malha)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro no teste '{test_name}': {e}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìã RESUMO DOS TESTES")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ Todos os testes passaram! A API IBGE est√° funcionando corretamente.")
        print("Voc√™ pode executar o script principal para extrair todos os dados:")
        print("python api_IBGE.py")
    else:
        print("\n‚ö†Ô∏è Alguns testes falharam. Verifique os erros acima antes de prosseguir.")

if __name__ == "__main__":
    main()
